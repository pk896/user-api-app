<!-- views/checkout.ejs -->
<%
  const CO_VAT_RATE = typeof vatRate !== 'undefined' ? vatRate : 0.15;
  const CO_SHIPPING_FLAT = typeof shippingFlat !== 'undefined' ? shippingFlat : 0;
  const CO_NONCE = (typeof nonce !== 'undefined' ? nonce : '');
%>

<% if (success && success.length > 0) { %>
  <div class="flash flash-success">✅ <%= success %></div>
<% } %>
<% if (error && error.length > 0) { %>
  <div class="flash flash-error">❌ <%= error %></div>
<% } %>

<main class="checkout-page <%= themeCss && themeCss.includes('dark') ? 'dark-theme' : 'light-theme' %>">
  <header class="co-head">
    <div>
      <h1>Checkout</h1>
      <p class="muted">Review your items, adjust quantities, and pay securely with PayPal.</p>
    </div>
    <a href="/sales" class="link-back">← Continue shopping</a>
  </header>

  <!-- ✅ Live flash moved OUTSIDE payment card (full-width under header) -->
  <div id="liveFlash" role="alert" aria-live="polite" tabindex="-1"></div>

  <section class="co-grid">
    <div class="co-summary card">
      <h2>Order Summary</h2>
      <div id="summaryList" class="summary-list">
        <p class="muted">Loading items…</p>
      </div>

      <div class="totals">
        <div class="row"><span>Subtotal</span><span id="tSubtotal">—</span></div>
        <div class="row"><span>VAT (<span id="tVatRate"><%= (CO_VAT_RATE * 100).toFixed(0) %>%</span>)</span><span id="tVat">—</span></div>
        <div class="row"><span>Shipping</span><span id="tShipping">—</span></div>
        <div class="row total"><span>Total</span><span id="tTotal">—</span></div>
      </div>
    </div>

    <div class="co-payment card">
      <h2>Payment</h2>
      <div id="paypal-button-container"></div>
      <div id="payStatus" class="muted" style="margin-top:.6rem"></div>

      <div id="fallbackBox" class="fallback muted" hidden>
        Having trouble with PayPal? Please try again in a moment.
      </div>
    </div>
  </section>
</main>

<style nonce="<%= CO_NONCE %>">
  .checkout-page{max-width:1100px;margin:0 auto;padding:1rem}
  .co-head{display:flex;justify-content:space-between;align-items:flex-start;margin:.25rem 0 1rem}
  .link-back{text-decoration:none;border:1px solid #d1d5db;padding:.45rem .8rem;border-radius:8px}
  .co-grid{display:grid;grid-template-columns:2fr 1.3fr;gap:1rem}
  .card{background:var(--card-bg,#fff);border-radius:12px;box-shadow:0 4px 14px rgba(0,0,0,.08);padding:1rem}
  .summary-list{display:flex;flex-direction:column;gap:.6rem;margin:.5rem 0 1rem}
  .summary-item{display:grid;grid-template-columns:64px 1fr auto;gap:.75rem;align-items:center}
  .summary-item img{width:64px;height:64px;object-fit:cover;border-radius:.6rem}
  .muted{color:#6b7280}
  .totals{display:grid;gap:.35rem;margin-top:.75rem}
  .row{display:flex;justify-content:space-between}
  .row.total{font-weight:900;font-size:1.05rem;border-top:1px solid #e5e7eb;padding-top:.5rem}
  .fallback{margin-top:.75rem;font-size:.92rem}
  .qty-wrap{display:flex;align-items:center;gap:.35rem;margin-top:.35rem}
  .qty-btn{border:1px solid #d1d5db;background:#fff;border-radius:8px;padding:.2rem .55rem;cursor:pointer}
  .qty{min-width:2ch;text-align:center}
  .remove-btn{border:none;background:none;color:#ef4444;cursor:pointer;font-size:.9rem;margin-left:.35rem}
  .line-right{font-weight:700}

  /* ✅ Live flash styles — full width, above grid */
  #liveFlash .flash{padding:.7rem .9rem;border-radius:10px;margin:.6rem 0;font-weight:700}
  #liveFlash .flash-success{background:#ecfdf5;color:#065f46;border:1px solid #34d399}
  #liveFlash .flash-error{background:#fef2f2;color:#991b1b;border:1px solid #fca5a5}
  #liveFlash:focus{outline:2px solid #60a5fa; outline-offset:2px}

  @media (max-width:920px){.co-grid{grid-template-columns:1fr}}
</style>

<script id="checkout-config" type="application/json" nonce="<%= CO_NONCE %>">
  <%- JSON.stringify({ VAT_RATE: CO_VAT_RATE, SHIPPING_FLAT: CO_SHIPPING_FLAT }) %>
</script>

<script nonce="<%= CO_NONCE %>">
  document.addEventListener('DOMContentLoaded', async () => {
    const $ = (s,c=document)=>c.querySelector(s);

    const summaryList = $('#summaryList');
    const tSubtotal = $('#tSubtotal');
    const tVat = $('#tVat');
    const tShipping = $('#tShipping');
    const tTotal = $('#tTotal');
    const payStatus = $('#payStatus');
    const fallbackBox = $('#fallbackBox');
    const liveFlash = document.getElementById('liveFlash');

    const cfgEl = document.getElementById('checkout-config');
    const { VAT_RATE = 0.15, SHIPPING_FLAT = 0 } = cfgEl ? JSON.parse(cfgEl.textContent || '{}') : {};

    // Live flash (success persists; errors auto-hide)
    function showFlash(type, msg, opts={}){
      if(!liveFlash) return;
      const cls = type === 'error' ? 'flash flash-error' : 'flash flash-success';
      liveFlash.innerHTML = `<div class="${cls}">${msg}</div>`;
      liveFlash.focus?.();
      const autoHide = type === 'error' ? true : (opts.autoHide === true);
      if (autoHide) setTimeout(()=> { liveFlash.innerHTML = ''; }, opts.timeout || 4500);
    }

    // Load PayPal config
    const config = await (async ()=>{
      try { const r = await fetch('/payment/config', { credentials:'same-origin' });
            if(!r.ok) return null; return await r.json(); } catch { return null; }
    })();

    if(!config || !config.clientId){
      payStatus.textContent = 'Could not load PayPal configuration.';
      showFlash('error', 'Could not load PayPal configuration.');
      if (fallbackBox) fallbackBox.hidden = false;
      return;
    }

    const currency = (config.baseCurrency || config.currency || 'USD').toUpperCase();
    const CURRENCY_SYMBOL = { USD:'$', ZAR:'R', EUR:'€', GBP:'£' }[currency] || (currency + ' ');
    const fmt = (n)=> (CURRENCY_SYMBOL + Number(n||0).toFixed(2));

    function pickId(it){
      return it.id || it._id || it.productId || it.sku || it.customId;
    }

    async function getJSON(url, opts){
      try{
        const r = await fetch(url, { credentials:'same-origin', ...(opts||{}) });
        const ct = r.headers.get('content-type')||'';
        const data = ct.includes('application/json') ? await r.json() : null;
        return { ok: r.ok, status: r.status, data };
      }catch(e){ return { ok:false, status:0, data:null }; }
    }

    // --- CART STATE + RENDER ---
    let items = [];
    let subtotal = 0, vat = 0, shipping = 0, total = 0;

    function computeTotals(){
      subtotal = items.reduce((s,it)=> s + Number(it.price||0)*Number(it.quantity||1), 0);
      vat = subtotal * Number(VAT_RATE || 0);
      shipping = Number(SHIPPING_FLAT || 0);
      total = subtotal + vat + shipping;
      tSubtotal.textContent = fmt(subtotal);
      tVat.textContent = fmt(vat);
      tShipping.textContent = fmt(shipping);
      tTotal.textContent = fmt(total);
    }

    // ✅ accept a custom status so success doesn’t get overwritten
    function renderEmptyCart(statusMsg){
      summaryList.innerHTML = '<p class="muted">Your cart is empty. <a href="/sales">Go back to shop</a>.</p>';
      tSubtotal.textContent = fmt(0);
      tVat.textContent = fmt(0);
      tShipping.textContent = fmt(0);
      tTotal.textContent = fmt(0);
      payStatus.textContent = statusMsg || 'Add items to proceed with payment.';
    }

    function render(){
      if(!items.length){
        renderEmptyCart();
        return;
      }
      summaryList.innerHTML = items.map(it=>{
        const id = pickId(it);
        const qty = Number(it.quantity||1);
        const price = Number(it.price||0);
        const name = it.name || 'Item';
        const img = it.imageUrl || it.image || '';
        const line = price * qty;
        return `
          <div class="summary-item" data-id="${id}">
            <img src="${img}" alt="${name}" />
            <div>
              <div style="font-weight:700">${name}</div>
              <div class="muted">${fmt(price)} each</div>
              <div class="qty-wrap">
                <button class="qty-btn" data-act="dec" aria-label="Decrease quantity">−</button>
                <span class="qty" aria-live="polite">${qty}</span>
                <button class="qty-btn" data-act="inc" aria-label="Increase quantity">+</button>
                <button class="remove-btn" data-act="remove" aria-label="Remove item">Remove</button>
              </div>
            </div>
            <div class="line-right">${fmt(line)}</div>
          </div>
        `;
      }).join('');
      computeTotals();
    }

    async function loadCart(){
      const { ok, data } = await getJSON('/api/cart');
      items = ok && data && Array.isArray(data.items) ? data.items : [];
      render();
    }

    async function clearCartServer(){
      try { await fetch('/api/cart/clear', { method:'POST', credentials:'same-origin' }); } catch {}
    }

    async function finalizePaymentSuccess(){
      await clearCartServer();
      items = [];
      renderEmptyCart('✅ Payment successful!');   // <- keep the success status
      const btnWrap = document.querySelector('#paypal-button-container');
      if (btnWrap) btnWrap.innerHTML = '';
    }

    // initial load
    await loadCart();
    if(!items.length) return;

    // --- QTY HANDLERS ---
    summaryList.addEventListener('click', async (ev)=>{
      const btn = ev.target.closest('button');
      if(!btn) return;
      const act = btn.dataset.act;
      const row = ev.target.closest('.summary-item');
      if(!row) return;
      const id = row.getAttribute('data-id');
      const idx = items.findIndex(i => String(pickId(i)) === String(id));
      if(idx < 0) return;

      let qty = Number(items[idx].quantity || 1);
      if(act === 'inc') qty += 1;
      if(act === 'dec') qty = Math.max(1, qty - 1);

      if(act === 'remove'){
        const { ok, data } = await getJSON(`/api/cart/item/${encodeURIComponent(id)}`, { method:'DELETE' });
        if(ok && data && data.items){
          items = data.items;
          render();
          showFlash('success', 'Item removed from cart.', { autoHide: true });
        }else{
          const msg = 'Could not remove item. Please try again.';
          payStatus.textContent = msg;
          showFlash('error', msg, { autoHide: true });
        }
        return;
      }

      const { ok, data } = await getJSON(`/api/cart/item/${encodeURIComponent(id)}`, {
        method:'PATCH',
        headers:{ 'Content-Type':'application/json' },
        body: JSON.stringify({ quantity: qty })
      });
      if(ok && data && data.items){
        items = data.items;
        render();
        showFlash('success', 'Quantity updated.', { autoHide: true });
      }else{
        const msg = 'Could not update quantity. Please try again.';
        payStatus.textContent = msg;
        showFlash('error', msg, { autoHide: true });
      }
    });

    // --- LOAD PAYPAL SDK (currency must match server) ---
    try {
      await new Promise((resolve, reject) => {
        const s = document.createElement('script');
        const isLive = (config.mode && String(config.mode).toLowerCase() === 'live');
        const host = isLive ? 'https://www.paypal.com' : 'https://www.sandbox.paypal.com';

        const params = new URLSearchParams({
          'client-id': config.clientId,
          'components': 'buttons',
          'currency': currency,
          'intent': 'capture'
        });
        s.src = `${host}/sdk/js?${params.toString()}`;
        s.onload = resolve;
        s.onerror = reject;
        document.head.appendChild(s);
      });
    } catch (e) {
      const msg = 'PayPal failed to load.';
      console.error(msg, e);
      payStatus.textContent = msg;
      showFlash('error', msg, { autoHide: true });
      if (fallbackBox) fallbackBox.hidden = false;
      return;
    }

    if(!window.paypal){
      const msg = 'PayPal SDK failed to initialize.';
      payStatus.textContent = msg;
      showFlash('error', msg, { autoHide: true });
      if (fallbackBox) fallbackBox.hidden = false;
      return;
    }

    // --- Buttons ---
    paypal.Buttons({
      createOrder: async () => {
        await loadCart();
        if(!items.length){
          const msg = 'Your cart is empty.';
          payStatus.textContent = msg;
          showFlash('error', msg, { autoHide: true });
          throw new Error('Empty cart');
        }
        computeTotals();
        payStatus.textContent = 'Creating order…';
        const r = await fetch('/payment/create-order', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'same-origin',
          body: JSON.stringify({
            total: total.toFixed(2),
            currency,
            referenceId: 'PK-CHECKOUT-' + Date.now()
          })
        });
        const data = await r.json().catch(()=> ({}));
        if(!r.ok || !data.id) {
          console.error('create_order_error', data);
          const msg = (data && data.message) ? data.message : 'Failed to create order.';
          payStatus.textContent = msg;
          showFlash('error', msg, { autoHide: true });
          throw new Error(msg);
        }
        payStatus.textContent = 'Order created. Awaiting approval…';
        return data.id;
      },

      onApprove: async (data) => {
        payStatus.textContent = 'Finalizing payment…';
        const r = await fetch('/payment/capture-order', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'same-origin',
          body: JSON.stringify({ orderID: data.orderID })
        });
        const res = await r.json().catch(()=> ({}));
        if(!r.ok || !res.success){
          console.error('capture_error', res);
          const msg = (res && res.message) ? res.message : 'Payment capture failed.';
          payStatus.textContent = msg;
          showFlash('error', msg, { autoHide: true });
          return;
        }
        payStatus.textContent = '✅ Payment successful!';
        showFlash('success', 'Payment successful!');
        await finalizePaymentSuccess();
        // location.href = `/thank-you?orderID=${res.order?.id || ''}`;

        // 🔁 Redirect to Thank You (pass the PayPal order id)
  setTimeout(() => {
    const oid = res.orderId || res.order?.id || '';
    location.href = `/thank-you?orderID=${encodeURIComponent(oid)}`;
  }, 1400);
      },

      onError: (err) => {
        console.error(err);
        const msg = 'An error occurred during payment.';
        payStatus.textContent = msg;
        showFlash('error', msg, { autoHide: true });
      }

    }).render('#paypal-button-container');
  });
</script>















<!-- views/checkout.ejs --
<%
  // Server-provided knobs (safe defaults)
  const VAT_RATE = typeof vatRate !== 'undefined' ? vatRate : 0.15;  // SA VAT 15%
  const SHIPPING_FLAT = typeof shippingFlat !== 'undefined' ? shippingFlat : 0; // default 0
  const NONCE = (typeof nonce !== 'undefined' ? nonce : '');
%>

<% if (success && success.length > 0) { %>
  <div class="flash flash-success">✅ <%= success %></div>
<% } %>
<% if (error && error.length > 0) { %>
  <div class="flash flash-error">❌ <%= error %></div>
<% } %>

<main class="checkout-page <%= themeCss && themeCss.includes('dark') ? 'dark-theme' : 'light-theme' %>">
  <header class="co-head">
    <div>
      <h1>Checkout</h1>
      <p class="muted">Review your items, adjust quantities, and pay securely with PayPal.</p>
    </div>
    <a href="/sales" class="link-back">← Continue shopping</a>
  </header>

  <section class="co-grid">
    !-- 🧾 Order Summary --
    <div class="co-summary card">
      <h2>Order Summary</h2>
      <div id="summaryList" class="summary-list">
        <p class="muted">Loading items…</p>
      </div>

      <div class="totals">
        <div class="row"><span>Subtotal</span><span id="tSubtotal">—</span></div>
        <div class="row"><span>VAT (<span id="tVatRate"><%= (VAT_RATE * 100).toFixed(0) %>%</span>)</span><span id="tVat">—</span></div>
        <div class="row"><span>Shipping</span><span id="tShipping">—</span></div>
        <div class="row total"><span>Total</span><span id="tTotal">—</span></div>
      </div>
    </div>

    !-- 💳 Payment --
    <div class="co-payment card">
      <h2>Payment</h2>
      <div id="paypal-button-container"></div>
      <div id="payStatus" class="muted" style="margin-top:.6rem"></div>

      <div id="fallbackBox" class="fallback muted" hidden>
        Having trouble with PayPal? Please try again in a moment.
      </div>
    </div>
  </section>
</main>

<style nonce="<%= NONCE %>">
  .checkout-page{max-width:1100px;margin:0 auto;padding:1rem}
  .co-head{display:flex;justify-content:space-between;align-items:flex-start;margin:.25rem 0 1rem}
  .link-back{text-decoration:none;border:1px solid #d1d5db;padding:.45rem .8rem;border-radius:8px}
  .co-grid{display:grid;grid-template-columns:2fr 1.3fr;gap:1rem}
  .card{background:var(--card-bg,#fff);border-radius:12px;box-shadow:0 4px 14px rgba(0,0,0,.08);padding:1rem}
  .summary-list{display:flex;flex-direction:column;gap:.6rem;margin:.5rem 0 1rem}
  .summary-item{display:grid;grid-template-columns:64px 1fr auto;gap:.75rem;align-items:center}
  .summary-item img{width:64px;height:64px;object-fit:cover;border-radius:.6rem}
  .muted{color:#6b7280}
  .totals{display:grid;gap:.35rem;margin-top:.75rem}
  .row{display:flex;justify-content:space-between}
  .row.total{font-weight:900;font-size:1.05rem;border-top:1px solid #e5e7eb;padding-top:.5rem}
  .fallback{margin-top:.75rem;font-size:.92rem}
  .qty-wrap{display:flex;align-items:center;gap:.35rem;margin-top:.35rem}
  .qty-btn{border:1px solid #d1d5db;background:#fff;border-radius:8px;padding:.2rem .55rem;cursor:pointer}
  .qty{min-width:2ch;text-align:center}
  .remove-btn{border:none;background:none;color:#ef4444;cursor:pointer;font-size:.9rem;margin-left:.35rem}
  .line-right{font-weight:700}
  @media (max-width:920px){.co-grid{grid-template-columns:1fr}}
</style>

<script id="checkout-config" type="application/json" nonce="<%= NONCE %>">
  <%- JSON.stringify({ VAT_RATE: VAT_RATE, SHIPPING_FLAT: SHIPPING_FLAT }) %>
</script>

<script nonce="<%= NONCE %>">
  document.addEventListener('DOMContentLoaded', async () => {
    const $ = (s,c=document)=>c.querySelector(s);

    const summaryList = $('#summaryList');
    const tSubtotal = $('#tSubtotal');
    const tVat = $('#tVat');
    const tShipping = $('#tShipping');
    const tTotal = $('#tTotal');
    const payStatus = $('#payStatus');
    const fallbackBox = $('#fallbackBox');

    const cfgEl = document.getElementById('checkout-config');
    const { VAT_RATE = 0.15, SHIPPING_FLAT = 0 } = cfgEl ? JSON.parse(cfgEl.textContent || '{}') : {};

    // Load PayPal config
    const config = await (async ()=>{
      try { const r = await fetch('/payment/config', { credentials:'same-origin' });
            if(!r.ok) return null; return await r.json(); } catch { return null; }
    })();

    if(!config || !config.clientId){
      payStatus.textContent = 'Could not load PayPal configuration.';
      if (fallbackBox) fallbackBox.hidden = false;
      return;
    }

    const currency = (config.baseCurrency || config.currency || 'USD').toUpperCase();
    const CURRENCY_SYMBOL = { USD:'$', ZAR:'R', EUR:'€', GBP:'£' }[currency] || (currency + ' ');
    const fmt = (n)=> (CURRENCY_SYMBOL + Number(n||0).toFixed(2));

    function pickId(it){
      return it.id || it._id || it.productId || it.sku || it.customId;
    }

    async function getJSON(url, opts){
      try{
        const r = await fetch(url, { credentials:'same-origin', ...(opts||{}) });
        const ct = r.headers.get('content-type')||'';
        const data = ct.includes('application/json') ? await r.json() : null;
        return { ok: r.ok, status: r.status, data };
      }catch(e){ return { ok:false, status:0, data:null }; }
    }

    // --- CART STATE + RENDER ---
    let items = [];
    let subtotal = 0, vat = 0, shipping = 0, total = 0;

    function computeTotals(){
      subtotal = items.reduce((s,it)=> s + Number(it.price||0)*Number(it.quantity||1), 0);
      vat = subtotal * Number(VAT_RATE || 0);
      shipping = Number(SHIPPING_FLAT || 0);
      total = subtotal + vat + shipping;
      tSubtotal.textContent = fmt(subtotal);
      tVat.textContent = fmt(vat);
      tShipping.textContent = fmt(shipping);
      tTotal.textContent = fmt(total);
    }

    function render(){
      if(!items.length){
        summaryList.innerHTML = '<p class="muted">Your cart is empty. <a href="/sales">Go back to shop</a>.</p>';
        payStatus.textContent = 'Add items to proceed with payment.';
        return;
      }
      summaryList.innerHTML = items.map(it=>{
        const id = pickId(it);
        const qty = Number(it.quantity||1);
        const price = Number(it.price||0);
        const name = it.name || 'Item';
        const img = it.imageUrl || it.image || '';
        const line = price * qty;
        return `
          <div class="summary-item" data-id="${id}">
            <img src="${img}" alt="${name}" />
            <div>
              <div style="font-weight:700">${name}</div>
              <div class="muted">${fmt(price)} each</div>
              <div class="qty-wrap">
                <button class="qty-btn" data-act="dec" aria-label="Decrease quantity">−</button>
                <span class="qty" aria-live="polite">${qty}</span>
                <button class="qty-btn" data-act="inc" aria-label="Increase quantity">+</button>
                <button class="remove-btn" data-act="remove" aria-label="Remove item">Remove</button>
              </div>
            </div>
            <div class="line-right">${fmt(line)}</div>
          </div>
        `;
      }).join('');
      computeTotals();
    }

    async function loadCart(){
      const { ok, data } = await getJSON('/api/cart');
      items = ok && data && Array.isArray(data.items) ? data.items : [];
      render();
    }

    // initial load
    await loadCart();
    if(!items.length) return;

    // --- QTY HANDLERS ---
    summaryList.addEventListener('click', async (ev)=>{
      const btn = ev.target.closest('button');
      if(!btn) return;
      const act = btn.dataset.act;
      const row = ev.target.closest('.summary-item');
      if(!row) return;
      const id = row.getAttribute('data-id');
      const idx = items.findIndex(i => String(pickId(i)) === String(id));
      if(idx < 0) return;

      let qty = Number(items[idx].quantity || 1);

      if(act === 'inc') qty += 1;
      if(act === 'dec') qty = Math.max(1, qty - 1);

      if(act === 'remove'){
        // DELETE item
        const { ok, data } = await getJSON(`/api/cart/item/${encodeURIComponent(id)}`, { method:'DELETE' });
        if(ok && data && data.items){
          items = data.items;
          render();
        }else{
          payStatus.textContent = 'Could not remove item. Please try again.';
        }
        return;
      }

      // PATCH new quantity
      const { ok, data } = await getJSON(`/api/cart/item/${encodeURIComponent(id)}`, {
        method:'PATCH',
        headers:{ 'Content-Type':'application/json' },
        body: JSON.stringify({ quantity: qty })
      });
      if(ok && data && data.items){
        items = data.items;
        render();
      }else{
        payStatus.textContent = 'Could not update quantity. Please try again.';
      }
    });

    // --- LOAD PAYPAL SDK (currency must match server) ---
    try {
      await new Promise((resolve, reject) => {
        const s = document.createElement('script');
        const isLive = (config.mode && String(config.mode).toLowerCase() === 'live');
        const host = isLive ? 'https://www.paypal.com' : 'https://www.sandbox.paypal.com';

        const params = new URLSearchParams({
          'client-id': config.clientId,
          'components': 'buttons',
          'currency': currency,
          'intent': 'capture'
        });
        s.src = `${host}/sdk/js?${params.toString()}`;
        s.onload = resolve;
        s.onerror = reject;
        document.head.appendChild(s);
      });
    } catch (e) {
      console.error('PayPal SDK load failed', e);
      payStatus.textContent = 'PayPal failed to load.';
      if (fallbackBox) fallbackBox.hidden = false;
      return;
    }

    if(!window.paypal){
      payStatus.textContent = 'PayPal SDK failed to initialize.';
      if (fallbackBox) fallbackBox.hidden = false;
      return;
    }

    // --- Buttons ---
    paypal.Buttons({
      createOrder: async () => {
        // refresh cart before creating order (trust server in production)
        await loadCart();
        if(!items.length){
          payStatus.textContent = 'Your cart is empty.';
          throw new Error('Empty cart');
        }
        // recompute totals client-side (server should recompute as well)
        computeTotals();
        payStatus.textContent = 'Creating order…';
        const r = await fetch('/payment/create-order', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'same-origin',
          body: JSON.stringify({
            total: total.toFixed(2),   // send a money string
            currency,                  // MUST match SDK currency
            referenceId: 'PK-CHECKOUT-' + Date.now()
          })
        });
        const data = await r.json().catch(()=> ({}));
        if(!r.ok || !data.id) {
          console.error('create_order_error', data);
          payStatus.textContent = (data && data.message) ? data.message : 'Failed to create order.';
          throw new Error(data.message || 'PayPal create order failed');
        }
        payStatus.textContent = 'Order created. Awaiting approval…';
        return data.id;
      },

      onApprove: async (data) => {
        payStatus.textContent = 'Finalizing payment…';
        const r = await fetch('/payment/capture-order', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'same-origin',
          body: JSON.stringify({ orderID: data.orderID })
        });
        const res = await r.json().catch(()=> ({}));
        if(!r.ok || !res.success){
          console.error('capture_error', res);
          payStatus.textContent = (res && res.message) ? res.message : 'Payment capture failed.';
          return;
        }
        payStatus.textContent = '✅ Payment successful!';

        // Optional: clear cart on success (if your API supports it)
        try { await fetch('/api/cart/clear', { method:'POST', credentials:'same-origin' }); } catch {}

        // Redirect to a thank-you page if you have one
        // location.href = '/order-success';
      },

      onError: (err) => {
        console.error(err);
        payStatus.textContent = 'An error occurred during payment.';
      }

    }).render('#paypal-button-container');
  });
</script>
-->