<!-- views/thank-you.ejs -->
<%
  const NONCE = typeof nonce !== 'undefined' ? nonce : '';
%>

<!-- Server flash (from redirects etc.) -->
<% if (success && success.length > 0) { %>
  <div class="flash flash-success">‚úÖ <%= success %></div>
<% } %>
<% if (error && error.length > 0) { %>
  <div class="flash flash-error">‚ùå <%= error %></div>
<% } %>

<main class="ty-page <%= themeCss && themeCss.includes('dark') ? 'dark-theme' : 'light-theme' %>">
  <header class="ty-head">
    <div>
      <h1>üéâ Thank you for your purchase!</h1>
      <p class="muted">
        We‚Äôve received your order<span id="tyOrderIdWrap" hidden> ‚Äî <strong id="tyOrderId">‚Äî</strong></span>.
      </p>
    </div>
    <div class="btns">
      <a href="/sales" class="btn btn-primary" id="btnShop">‚Üê Continue shopping</a>
      <a href="/orders" class="btn btn-light">View my orders</a>
      <button id="btnPrint" class="btn btn-ghost">üñ®Ô∏è Print receipt</button>
    </div>
  </header>

  <section class="card">
    <div id="orderMeta" class="order-meta">
      <div><strong>Status:</strong> <span id="ordStatus">‚Äî</span></div>
      <div><strong>Date:</strong> <span id="ordDate">‚Äî</span></div>
      <div><strong>Paid:</strong> <span id="ordPaid">‚Äî</span></div>
    </div>

    <div id="itemsList" class="items-list">
      <p class="muted">Loading order‚Ä¶</p>
    </div>

    <div class="totals">
      <div class="row"><span>Subtotal</span><span id="tSubtotal">‚Äî</span></div>
      <div class="row"><span>VAT</span><span id="tVat">‚Äî</span></div>
      <div class="row"><span>Shipping</span><span id="tShipping">‚Äî</span></div>
      <div class="row total"><span>Total</span><span id="tTotal">‚Äî</span></div>
    </div>

    <div id="shipBox" class="ship card-ghost" hidden>
      <h3>Shipping</h3>
      <div><strong>Name:</strong> <span id="shipName">‚Äî</span></div>
      <div id="shipAddr" class="muted"></div>
    </div>
  </section>
</main>

<style nonce="<%= NONCE %>">
  .ty-page{max-width:900px;margin:0 auto;padding:1rem}
  .ty-head{display:flex;justify-content:space-between;align-items:flex-start;margin:.25rem 0 1rem;gap:.5rem;flex-wrap:wrap}
  .btns{display:flex;gap:.5rem;flex-wrap:wrap}
  .btn{border:1px solid #111827;border-radius:10px;padding:.5rem .8rem;cursor:pointer;text-decoration:none}
  .btn-primary{background:#111827;color:#fff}
  .btn-light{border-color:#d1d5db;background:#fff;color:#111827}
  .btn-ghost{border-color:#d1d5db;background:transparent;color:#111827}
  .card{background:var(--card-bg,#fff);border-radius:12px;box-shadow:0 4px 14px rgba(0,0,0,.08);padding:1rem}
  .card-ghost{margin-top:1rem}
  .muted{color:#6b7280}
  .order-meta{display:grid;grid-template-columns:1fr 1fr 1fr;gap:.6rem;margin-bottom:1rem}
  .items-list{display:flex;flex-direction:column;gap:.6rem;margin:.5rem 0 1rem}
  .item-row{display:grid;grid-template-columns:1fr auto auto;gap:.6rem;align-items:center}
  .item-row .qty{min-width:64px;text-align:right}
  .totals{display:grid;gap:.35rem;margin-top:.75rem}
  .row{display:flex;justify-content:space-between}
  .row.total{font-weight:900;font-size:1.05rem;border-top:1px solid #e5e7eb;padding-top:.5rem}
  @media (max-width:760px){.order-meta{grid-template-columns:1fr}}
  .flash{margin:.6rem 0;padding:.6rem .8rem;border-radius:10px}
  .flash-success{background:#ecfdf5;color:#065f46;border:1px solid #34d399}
  .flash-error{background:#fef2f2;color:#991b1b;border:1px solid #fca5a5}
</style>

<!-- Pass the orderID via JSON -->
<script id="ty-config" type="application/json" nonce="<%= NONCE %>">
  <%- JSON.stringify({ orderID: orderID || '' }) %>
</script>

<script nonce="<%= NONCE %>">
document.addEventListener('DOMContentLoaded', async () => {
  const cfg = JSON.parse(document.getElementById('ty-config').textContent || '{}');
  const orderID = cfg.orderID || '';

  const $ = (s,c=document)=>c.querySelector(s);
  const itemsList = $('#itemsList');
  const ordStatus = $('#ordStatus');
  const ordDate = $('#ordDate');
  const ordPaid = $('#ordPaid');
  const tSubtotal = $('#tSubtotal');
  const tVat = $('#tVat');
  const tShipping = $('#tShipping');
  const tTotal = $('#tTotal');
  const shipBox = $('#shipBox');
  const shipName = $('#shipName');
  const shipAddr = $('#shipAddr');
  const tyOrderIdWrap = $('#tyOrderIdWrap');
  const tyOrderId = $('#tyOrderId');
  const btnPrint = $('#btnPrint');

  // Currency (match /payment/config)
  const config = await (async () => {
    try { const r = await fetch('/payment/config', { credentials:'same-origin' });
          if (!r.ok) return null; return await r.json(); } catch { return null; }
  })();
  const currency = (config?.baseCurrency || config?.currency || 'USD').toUpperCase();
  const SYMBOL = { USD:'$', ZAR:'R', EUR:'‚Ç¨', GBP:'¬£' }[currency] || (currency + ' ');
  const money = (n) => SYMBOL + Number(n||0).toFixed(2);

  btnPrint?.addEventListener('click', () => window.print());

  if (!orderID) {
    itemsList.innerHTML = '<p class="muted">No order ID provided. You can continue shopping.</p>';
    return;
  }

  tyOrderIdWrap.hidden = false;
  tyOrderId.textContent = orderID;

  try {
    const r = await fetch(`/payment/order/${encodeURIComponent(orderID)}`, { credentials:'same-origin' });
    const data = await r.json();
    if (!r.ok || !data.success) throw new Error(data.message || 'Order fetch failed');

    const o = data.order;

    // Header meta
    ordStatus.textContent = o.status || '‚Äî';
    ordDate.textContent = o.createdAt ? new Date(o.createdAt).toLocaleString() : '‚Äî';
    ordPaid.textContent = o.amount?.value ? money(o.amount.value) : '‚Äî';

    // Items
    if (!o.items || !o.items.length) {
      itemsList.innerHTML = '<p class="muted">No line items available.</p>';
    } else {
      itemsList.innerHTML = o.items.map(it => {
        const unit = Number(it.price?.value ?? it.price ?? 0);
        const qty = Number(it.quantity || 1);
        const line = unit * qty;
        return `
          <div class="item-row">
            <div>${it.name || 'Item'}</div>
            <div class="qty">√ó ${qty}</div>
            <div><strong>${money(line)}</strong></div>
          </div>
        `;
      }).join('');
    }

    // Totals ‚Äî prefer PayPal breakdown, else derive
    const bd = o.breakdown || {};
    const totalVal = Number(o.amount?.value ?? o.total ?? 0);
    const shippingVal = Number(bd.shipping?.value ?? o.shipping ?? 0);

    // if breakdown missing, derive subtotal from items
    let derivedSubtotal = 0;
    if ((!bd.itemTotal?.value && !o.subtotal) && Array.isArray(o.items)) {
      derivedSubtotal = o.items.reduce((s, it) => {
        const unit = Number(it.price?.value ?? it.price ?? 0);
        const qty = Number(it.quantity || 1);
        return s + unit * qty;
      }, 0);
    }

    const subtotalVal = Number(bd.itemTotal?.value ?? o.subtotal ?? derivedSubtotal);
    let vatVal = Number(bd.taxTotal?.value ?? o.tax ?? 0);

    // If VAT unknown but we have total & (sub + shipping), infer it (never negative)
    if (!bd.taxTotal?.value && !o.tax) {
      const maybeVat = totalVal - (subtotalVal + shippingVal);
      if (Number.isFinite(maybeVat) && maybeVat > 0) vatVal = maybeVat;
    }

    tSubtotal.textContent = money(subtotalVal);
    tVat.textContent = money(vatVal);
    tShipping.textContent = money(shippingVal);
    tTotal.textContent = money(totalVal);

    // Shipping box
    if (o.shipping && (o.shipping.name || o.shipping.address)) {
      shipBox.hidden = false;
      shipName.textContent = o.shipping.name || '‚Äî';
      const addr = o.shipping.address || {};
      const parts = [
        addr.address_line_1,
        addr.address_line_2,
        addr.admin_area_2,   // city
        addr.admin_area_1,   // state/province
        addr.postal_code,
        addr.country_code
      ].filter(Boolean);
      shipAddr.textContent = parts.join(', ');
    }
  } catch (e) {
    console.error(e);
    itemsList.innerHTML = '<p class="muted">Could not load your order details.</p>';
  }
});
</script>
