<!-- views/dashboards/admin-dashboard.ejs -->
<h1 class="page-title">üß≠ Admin Dashboard</h1>

<!-- ‚úÖ Flash Messages -->
<% if (success && success.length > 0) { %>
  <div class="flash flash-success" role="status" aria-live="polite"><%= success %></div>
<% } %>
<% if (error && error.length > 0) { %>
  <div class="flash flash-error" role="alert" aria-live="assertive"><%= error %></div>
<% } %>

<!-- üëã Welcome Admin -->
<div class="welcome-block">
  <h2>Welcome, <%= admin ? admin.name : "Admin" %> üëã</h2>
  <a href="/admin/logout" class="btn small logout-btn" aria-label="Log out of admin">üö™ Logout</a>
</div>

<!-- üìä Stats Overview -->
<div class="stats-grid" role="region" aria-label="Message statistics">
  <div class="stat-card total">
    <h3>üì® Total Messages</h3>
    <p><%= stats.total %></p>
  </div>

  <div class="stat-card pending">
    <h3>üïì Pending Replies</h3>
    <p>
      <%= stats.pending %>
      <% const showBadge = Number(stats.unreadForAdmin || 0) > 0; %>
      <span id="unreadBadge" class="badge <%= showBadge ? '' : 'hidden' %>" aria-live="polite">
        <%= showBadge ? (stats.unreadForAdmin + ' New') : '' %>
      </span>
    </p>
  </div>

  <div class="stat-card replied">
    <h3>üí¨ Replied</h3>
    <p><%= stats.replied %></p>
  </div>
</div>

<!-- üîó Quick Actions -->
<div class="quick-links" role="navigation" aria-label="Quick admin links">
  <a href="/contact/all" class="btn primary big">üì¨ View All Messages</a>
  <!-- Optional: show Orders link if you unified admin roles -->
  <a href="/admin/orders" class="btn primary big" style="background:#111827;margin-left:.5rem">üßæ Manage Orders</a>
  <!-- NEW: Delivery Options Management -->
  <a href="/admin/delivery-options" class="btn primary big" style="background:#0ea5e9;margin-left:.5rem">‚öôÔ∏è Delivery Options</a>
</div>

<!-- üßæ Recent Messages -->
<h2 class="section-title">üìã Recent Messages</h2>

<div class="recent-list">
  <% if (recentMessages && recentMessages.length > 0) { %>
    <% recentMessages.forEach(msg => { %>
      <a class="message-row anchor-card" href="/contact/thread/<%= msg._id %>" aria-label="Open thread from <%= msg.name %>">
        <div class="msg-info">
          <strong><%= msg.name %></strong>
          <span class="msg-email"><%= msg.email %></span>
          <p class="msg-snippet">
            <%= msg.thread && msg.thread.length > 0
              ? (msg.thread[msg.thread.length - 1].message || '').slice(0, 80)
              : "No message content" %>...
          </p>
        </div>
        <div class="msg-meta">
          <span class="msg-date"><%= new Date(msg.createdAt).toLocaleString() %></span>
          <% if (msg.readByAdmin === false) { %>
            <span class="status unread">üî¥ New</span>
          <% } else if (msg.thread && msg.thread.some(t => t.sender === 'admin')) { %>
            <span class="status replied">üí¨ Replied</span>
          <% } else { %>
            <span class="status pending">üïì Pending</span>
          <% } %>
        </div>
      </a>
    <% }) %>
  <% } else { %>
    <p class="no-msg">No recent messages.</p>
  <% } %>
</div>

<!-- üîî Notification Toast (ARIA live region) -->
<div id="toast" class="toast hidden" role="status" aria-live="polite" aria-atomic="true">
  üì© New message received!
</div>

<!-- üé® Styles -->
<style>
  .anchor-card {
    display:flex; justify-content:space-between; align-items:flex-start;
    background:#fff; border-radius:10px; padding:.8rem 1rem; margin-bottom:.6rem;
    box-shadow:0 1px 6px rgba(0,0,0,0.05); text-decoration:none; color:inherit;
    transition: background .2s ease, box-shadow .2s ease, transform .06s ease;
  }
  .anchor-card:hover { background:#f9fafb; }
  .anchor-card:focus { outline:2px solid #2563eb; outline-offset:2px; }
  .anchor-card:active { transform:scale(.998); }

  .dark-theme .anchor-card { background:#1f2937; color:#f9fafb; }
  .dark-theme .anchor-card:hover { background:#111827; }

  .page-title { text-align: center; margin: 1rem 0; font-size: 1.8rem; font-weight: 700; }
  .welcome-block { display:flex; justify-content:space-between; align-items:center; max-width:800px; margin:0 auto 1rem; }

  .stats-grid { display:grid; grid-template-columns:repeat(auto-fit, minmax(230px,1fr)); gap:1rem; max-width:800px; margin:1rem auto; }
  .stat-card { border-radius:12px; padding:1rem; color:#fff; text-align:center; box-shadow:0 2px 10px rgba(0,0,0,0.1); transition:transform .2s ease; }
  .stat-card:hover { transform: translateY(-3px); }
  .stat-card.total { background:#2563eb; }
  .stat-card.pending { background:#f59e0b; position:relative; }
  .stat-card.replied { background:#16a34a; }
  .stat-card h3 { font-size:1rem; margin-bottom:.4rem; }
  .stat-card p { font-size:1.6rem; font-weight:700; margin:0; }

  .badge { background:#ef4444; color:#fff; font-size:.75rem; padding:.2rem .5rem; border-radius:999px; margin-left:.4rem; font-weight:600; animation: fadeIn .4s ease; }
  .hidden { display:none; }

  .quick-links { text-align:center; margin:1.5rem 0; display:flex; gap:.5rem; justify-content:center; flex-wrap:wrap; }
  .btn.primary.big { padding:.7rem 1.5rem; font-size:1rem; font-weight:600; color:#fff; background:#2563eb; border-radius:8px; text-decoration:none; transition: background .2s ease; display:inline-block; }
  .btn.primary.big:hover { background:#1d4ed8; }

  .section-title { text-align:center; margin:1.5rem 0 .5rem; font-size:1.3rem; font-weight:600; }
  .recent-list { max-width:800px; margin:0 auto 2rem; }
  .message-row { display:flex; justify-content:space-between; align-items:flex-start; background:#fff; border-radius:10px; padding:.8rem 1rem; margin-bottom:.6rem; box-shadow:0 1px 6px rgba(0,0,0,0.05); transition: background .2s ease; }
  .message-row:hover { background:#f9fafb; }
  .dark-theme .message-row { background:#1f2937; color:#f9fafb; }
  .msg-info strong { display:block; font-size:1rem; }
  .msg-email { font-size:.85rem; color:#6b7280; display:block; }
  .msg-snippet { font-size:.9rem; margin-top:.3rem; color:#374151; }
  .msg-meta { text-align:right; font-size:.85rem; }
  .msg-date { color:#9ca3af; display:block; }

  .status { font-weight:600; }
  .status.replied { color:#16a34a; }
  .status.pending { color:#f59e0b; }
  .status.unread { color:#ef4444; }

  .btn.small { padding:.4rem .7rem; border:none; border-radius:6px; cursor:pointer; font-weight:600; text-decoration:none; }
  .logout-btn { background:#ef4444; color:#fff; }
  .logout-btn:hover { background:#dc2626; }

  .flash { max-width:800px; margin:.5rem auto; padding:.8rem 1rem; border-radius:6px; text-align:center; font-weight:500; }
  .flash-success { background:#dcfce7; color:#166534; }
  .flash-error { background:#fee2e2; color:#991b1b; }
  .dark-theme .flash-success { background:#064e3b; color:#bbf7d0; }
  .dark-theme .flash-error { background:#7f1d1d; color:#fecaca; }

  .toast { position:fixed; bottom:25px; right:25px; background:#2563eb; color:#fff; padding:.9rem 1.4rem; border-radius:8px; font-weight:600; box-shadow:0 4px 12px rgba(0,0,0,0.15);
           opacity:0; transform:translateY(20px); transition:opacity .3s ease, transform .3s ease; z-index:999; }
  .toast.show { opacity:1; transform:translateY(0); }

  @keyframes fadeIn { from{opacity:0; transform:translateY(-5px)} to{opacity:1; transform:translateY(0)} }
  @keyframes pulse { 0%{transform:scale(1)} 50%{transform:scale(1.2)} 100%{transform:scale(1)} }
  .pulse { animation: pulse .4s ease; }

  /* Mobile tweaks for tiny screens */
  @media (max-width: 480px) {
    .page-title { font-size: 1.4rem; }
    .quick-links { gap:.4rem; }
    .btn.primary.big { width:100%; }
  }
</style>

<!-- ‚öôÔ∏è Live Unread Badge & Notification -->
<script nonce="<%= nonce %>">
document.addEventListener("DOMContentLoaded", () => {
  const badge = document.getElementById("unreadBadge");
  const toast = document.getElementById("toast");
  let lastCount = badge ? parseInt((badge.textContent || "0"), 10) || 0 : 0;

  async function updateUnreadBadge() {
    try {
      const res = await fetch("/contact/unread-count", { cache: "no-store", credentials: "same-origin" });
      if (!res.ok) throw new Error("Bad response");
      const data = await res.json();
      const count = Number(data.unreadCount || 0);

      if (!badge) return;

      if (count !== lastCount) {
        lastCount = count;
        if (count > 0) {
          badge.textContent = `${count} New`;
          badge.classList.remove("hidden");
          badge.classList.add("pulse");
          showToast("üì© New message received!");
          setTimeout(() => badge.classList.remove("pulse"), 600);
        } else {
          badge.classList.add("hidden");
          badge.textContent = "";
        }
      }
    } catch (err) {}
  }

  function showToast(text) {
    if (!toast) return;
    toast.textContent = text;
    toast.classList.add("show");
    setTimeout(() => toast.classList.remove("show"), 3500);
  }

  updateUnreadBadge();
  setInterval(updateUnreadBadge, 30000);
});
</script>
