<!-- ‚úÖ Flash Messages -->
<% if (success && success.length > 0) { %>
  <div class="flash flash-success">‚úÖ <%= success %></div>
<% } %>
<% if (error && error.length > 0) { %>
  <div class="flash flash-error">‚ùå <%= error %></div>
<% } %>

<!-- Page Styles (CSP-safe) -->
<style nonce="<%= nonce %>">
  /* Scope to this page */
  .shop-page { --gap: 1rem; }

  /* ========= header ========= */
  .shop-header { display:flex; justify-content:space-between; align-items:center; gap:1rem; margin: .25rem 0 1rem; flex-wrap: wrap; }
  .shop-title { font-size: clamp(1.25rem, 2.5vw, 1.6rem); font-weight: 800; letter-spacing:.2px; }
  .shop-sub { color: #6b7280; }

  /* üîé search box */
  .search-wrap{
    display:flex; gap:.5rem; align-items:center; flex:1 1 420px;
    background: var(--card-bg, #fff); border:1px solid #e5e7eb; border-radius: .8rem; padding:.5rem .6rem;
  }
  .search-wrap input{
    width:100%; border:0; outline:0; font: inherit; background: transparent;
  }
  .search-wrap .tag{
    white-space:nowrap; font-size:.85rem; color:#6b7280;
  }
  .search-meta{
    display:flex; align-items:center; gap:.6rem; color:#6b7280; font-size:.9rem;
  }
  .search-clear{
    border:0; background:transparent; cursor:pointer; color:#6b7280; padding:.25rem .45rem; border-radius:.5rem;
  }
  .search-clear:hover{ background:#f3f4f6; }

  /* ========= grid ========= */
  .shop-grid {
    display:grid; gap: var(--gap);
    grid-template-columns: repeat(auto-fit, minmax(210px,1fr));
  }
  .card-prod {
    background: var(--card-bg, #fff);
    border-radius: .9rem; overflow: hidden;
    box-shadow: var(--shadow, 0 4px 14px rgba(0,0,0,.08));
    display:flex; flex-direction:column;
    transform: translateY(0);
    animation: popIn .5s ease both;
  }
  @keyframes popIn {
    from { opacity:0; transform: translateY(14px) scale(.98); }
    to   { opacity:1; transform: translateY(0)   scale(1);   }
  }
  .card-img {
    position: relative; aspect-ratio: 4/3; background:#f3f4f6; overflow:hidden;
  }
  .card-img img {
    width:100%; height:100%; object-fit:cover;
    transform: scale(1.02);
    transition: transform .5s ease;
  }
  .card-prod:hover .card-img img { transform: scale(1.08) rotate(.3deg); }

  .badge {
    position:absolute; top:10px; left:10px;
    background:#111; color:#fff; font-weight:800;
    padding:.28rem .6rem; border-radius: 999px; font-size:.73rem;
    box-shadow: 0 4px 10px rgba(0,0,0,.18);
  }
  .badge.new  { background:#10b981; }
  .badge.sale { background:#eab308; color:#111; }
  .badge.hot  { background:#ef4444; }

  .card-body { padding:.85rem; display:flex; flex-direction:column; gap:.5rem; flex:1; }
  .prod-name { font-weight:800; font-size:1rem; white-space:nowrap; overflow:hidden; text-overflow:ellipsis; }
  .meta { display:flex; justify-content:space-between; align-items:center; gap:.6rem; }
  .price { color: var(--brand, #2563eb); font-weight:900; letter-spacing:.2px; }
  .stock-in { color:#16a34a; font-weight:700; }
  .stock-out { color:#ef4444; font-weight:700; }

  .actions { display:flex; gap:.6rem; }
  .btn-add, .btn-view {
    flex:1; border:0; border-radius:.7rem; padding:.55rem .8rem; font-weight:800; cursor:pointer;
    transition: transform .12s ease, box-shadow .2s ease, background .2s ease;
  }
  .btn-add { background: var(--brand, #2563eb); color:#fff; box-shadow: 0 6px 18px rgba(37,99,235,.26); }
  .btn-add:hover { transform: translateY(-1px); }
  .btn-add:active { transform: translateY(0); }
  .btn-add[aria-disabled="true"] { background:#9ca3af; cursor:not-allowed; box-shadow:none; pointer-events:none; }

  .btn-view { background: transparent; border:1px solid #d1d5db; color:inherit; text-align:center; }
  .btn-view:hover { background: rgba(37,99,235,.08); border-color: var(--brand, #2563eb); }

  /* ========= sticky cart FAB ========= */
  .cart-fab {
    position: fixed; right: 18px; bottom: 18px; z-index: 60;
    display:flex; align-items:center; gap:.5rem;
    background: var(--brand,#2563eb); color:#fff; border:0;
    padding:.75rem 1rem; border-radius: 999px; font-weight:900;
    box-shadow: 0 12px 24px rgba(37,99,235,.35);
    cursor:pointer;
    animation: fabIn .3s ease both;
  }
  @keyframes fabIn { from{opacity:0; transform: translateY(8px)} to{opacity:1; transform:translateY(0)} }
  .cart-fab:hover { transform: translateY(-1px); }
  .cart-count {
    min-width: 1.6rem; height:1.6rem; display:inline-grid; place-items:center;
    background:#16a34a; color:#fff; border-radius:999px; font-size:.85rem; font-weight:900;
    animation: pulse .8s ease-out both;
  }
  @keyframes pulse {
    0%{ transform: scale(1) } 40%{ transform: scale(1.15) } 100%{ transform: scale(1) }
  }

  /* ========= drawer ========= */
  .drawer-overlay {
    position:fixed; inset:0; background:rgba(0,0,0,.5);
    display:none; z-index: 70;
  }
  .drawer {
    position: fixed; right:0; top:0; bottom:0; width:min(420px, 92vw);
    background: var(--card-bg,#fff); box-shadow: -10px 0 24px rgba(0,0,0,.25);
    transform: translateX(100%); transition: transform .28s ease;
    z-index: 80; display:flex; flex-direction:column;
  }
  .drawer.open { transform: translateX(0); }
  .drawer-head { padding:1rem; display:flex; justify-content:space-between; align-items:center; border-bottom:1px solid #e5e7eb; }
  .drawer-body { padding: .75rem 1rem; overflow:auto; flex:1; display:flex; flex-direction:column; gap:.75rem; }
  .drawer-item {
    display:grid; grid-template-columns:64px 1fr auto; gap:.75rem; align-items:center;
    background:rgba(0,0,0,.02); border-radius:.8rem; padding:.5rem;
  }
  .drawer-item img { width:64px; height:64px; object-fit:cover; border-radius:.6rem; }
  .drawer-foot { padding:1rem; border-top:1px solid #e5e7eb; display:grid; gap:.6rem; }
  .total-row { display:flex; justify-content:space-between; font-weight:900; }
  .btn-checkout {
    border:0; border-radius:.8rem; padding:.7rem 1rem; font-weight:900; background:#16a34a; color:#fff; cursor:pointer;
    box-shadow: 0 10px 20px rgba(22,163,74,.25);
    transition: transform .12s ease, filter .2s ease;
  }
  .btn-checkout:hover { transform: translateY(-1px); filter: brightness(.98); }

  .close-x { background:transparent; border:0; font-size:1.2rem; cursor:pointer; }

  /* small helpers */
  .muted { color:#6b7280; }

  /* ===== mini checkout bar ===== */
  .checkout-bar{
    position: fixed; left: 50%; transform: translateX(-50%);
    bottom: 84px; /* sits above the FAB */
    display:flex; justify-content:space-between; align-items:center;
    gap:.8rem; width: min(680px, 92vw);
    background: var(--card-bg,#fff); color: inherit;
    border:1px solid #e5e7eb; border-radius: 999px;
    box-shadow: 0 12px 24px rgba(0,0,0,.12);
    padding: .65rem .8rem; z-index: 65;
    animation: fabIn .28s ease both;
  }
  .checkout-bar .co-left{ display:flex; align-items:center; gap:.4rem; padding-left:.4rem; }
  .checkout-bar .co-btn{
    text-decoration:none; background:#16a34a; color:#fff; font-weight:900;
    padding:.55rem .9rem; border-radius: 999px; display:inline-block;
    box-shadow: 0 8px 18px rgba(22,163,74,.25);
  }
  .checkout-bar .co-btn:hover{ transform: translateY(-1px); }
  @media (max-width:560px){ .checkout-bar{ bottom: 78px; } }

  /* üî¶ highlight */
  mark.hl{ background: #fde68a; padding: 0 .15em; border-radius: .2em; }
  .no-results{ text-align:center; padding:2rem 1rem; color:#6b7280; }

  /* ======= MOBILE OPTIMIZATION (Hisense U50 Lite) ======= */
@media (max-width: 480px) {
  .shop-page { --gap: .6rem; padding: .5rem; }

  /* shrink grid to show 2 small cards per row */
  .shop-grid {
    grid-template-columns: repeat(2, minmax(0, 1fr));
    gap: .6rem;
  }

  .card-prod {
    border-radius: .7rem;
    box-shadow: 0 2px 8px rgba(0,0,0,0.06);
  }

  .card-img {
    aspect-ratio: 1/1;   /* more compact square */
  }

  .card-body {
    padding: .55rem;
    gap: .4rem;
  }

  .prod-name {
    font-size: .85rem;
  }

  .price { font-size: .9rem; }
  .meta { flex-direction: column; align-items: flex-start; gap: .25rem; }

  .btn-add, .btn-view {
    padding: .45rem .55rem;
    font-size: .8rem;
    border-radius: .6rem;
  }

  /* tighten search/header spacing */
  .shop-header {
    flex-direction: column;
    align-items: stretch;
    gap: .5rem;
  }

  .search-wrap { flex: 1 1 100%; }

  /* checkout bar + fab smaller */
  .checkout-bar {
    width: 94vw;
    bottom: 72px;
    padding: .5rem .7rem;
  }
  .checkout-bar .co-btn {
    padding: .45rem .75rem;
    font-size: .9rem;
  }

  .cart-fab {
    padding: .55rem .8rem;
    font-size: .9rem;
  }

  .cart-count {
    min-width: 1.3rem;
    height: 1.3rem;
    font-size: .8rem;
  }
}

/* ultra-small screens (~320px) */
@media (max-width: 360px) {
  .shop-grid {
    grid-template-columns: repeat(2, 1fr);
    gap: .5rem;
  }

  .card-body {
    padding: .45rem;
  }

  .prod-name { font-size: .8rem; }
  .btn-add, .btn-view { font-size: .78rem; padding: .4rem .5rem; }
}

</style>

<main class="shop-page" id="shopPage">
  <header class="shop-header">
    <div>
      <h1 class="shop-title">Shop Products</h1>
      <p class="shop-sub">Browse and add to cart. Pay in Rands.</p>
    </div>

    <!-- üîé Search -->
    <div class="search-wrap" role="search">
      <span aria-hidden="true">üîé</span>
      <input id="searchBox" type="search" placeholder="Search products‚Ä¶" autocomplete="off" aria-label="Search products by name" />
      <button id="searchClear" class="search-clear" type="button" aria-label="Clear search">‚úñ</button>
      <span class="tag search-meta"><span id="resultCount"><%= (products && products.length) || 0 %></span> found</span>
    </div>

    <a href="/payment/checkout" class="btn btn-secondary">Go to Checkout</a>
  </header>

  <% if (products && products.length) { %>
    <section class="shop-grid" id="grid">
      <% products.forEach(p => {
           const price   = Number(p.price || 0);
           const inStock = Number(p.stock || 0) > 0;
           const name    = String(p.name || '');
      %>
        <article class="card-prod"
                 data-name="<%- name %>"
                 data-price="<%= price.toFixed(2) %>">
          <!-- ‚úÖ View goes to PUBLIC details route using customId -->
          <a class="card-img" href="/products/view/<%= p.customId %>" aria-label="Open <%= name %>">
            <img src="<%= p.imageUrl %>" alt="<%= name %>">
            <% if (p.isNew)   { %><span class="badge new">üÜï New</span><% } %>
            <% if (p.sale)    { %><span class="badge sale">üí∏ Sale</span><% } %>
            <% if (p.popular) { %><span class="badge hot">üî• Hot</span><% } %>
          </a>
          <div class="card-body">
            <div class="prod-name js-name"><%= name %></div>
            <div class="meta">
              <div class="price">R <%= price.toFixed(2) %></div>
              <div class="<%= inStock ? 'stock-in' : 'stock-out' %>">
                <%= inStock ? 'In stock' : 'Out of stock' %>
              </div>
            </div>
            <div class="actions">
              <!-- Add uses GET /api/cart/add?pid=:customId -->
              <a class="btn-add" href="/api/cart/add?pid=<%= p.customId %>" data-pid="<%= p.customId %>" <%= inStock ? '' : 'aria-disabled="true"' %>>‚ûï Add</a>
              <a class="btn-view" href="/products/view/<%= p.customId %>">üëÅÔ∏è View</a>
            </div>
          </div>
        </article>
      <% }) %>
    </section>
    <div id="noResults" class="no-results" hidden>üòï No products match your search.</div>
  <% } else { %>
    <div class="card" style="padding:2rem; text-align:center;">
      <div style="font-size:2rem;">ü™Ñ</div>
      <h3>No products yet</h3>
      <p class="muted">Please check back later.</p>
    </div>
  <% } %>

  <!-- Mini Checkout Bar (shown when cart has items) -->
  <div class="checkout-bar" id="miniCheckout" hidden>
    <div class="co-left">
      <strong id="miniSubtotal">R 0.00</strong>
      <span class="muted"> ¬∑ <span id="miniCount">0</span> item(s)</span>
    </div>
    <a href="/payment/checkout" class="co-btn">Checkout</a>
  </div>
</main>

<!-- Sticky Cart FAB -->
<button class="cart-fab" id="cartFab">
  üõí Cart <span class="cart-count" id="cartCount">0</span>
</button>

<!-- Drawer + overlay -->
<div class="drawer-overlay" id="drawerOverlay"></div>
<aside class="drawer" id="cartDrawer">
  <div class="drawer-head">
    <strong>My Cart</strong>
    <button class="close-x" id="drawerClose" aria-label="Close cart">‚úñ</button>
  </div>
  <div class="drawer-body" id="cartList">
    <p class="muted">Loading cart‚Ä¶</p>
  </div>
  <div class="drawer-foot">
    <div class="total-row">
      <span>Subtotal</span>
      <span id="cartSubtotal">R 0.00</span>
    </div>
    <a href="/payment/checkout" class="btn-checkout">Proceed to Checkout</a>
  </div>
</aside>

<!-- Page Script (CSP-safe) -->
<script nonce="<%= nonce %>">
  document.addEventListener('DOMContentLoaded', () => {
    const $  = (s,c=document)=>c.querySelector(s);
    const $$ = (s,c=document)=>Array.from(c.querySelectorAll(s));

    const cartFab      = $('#cartFab');
    const drawer       = $('#cartDrawer');
    const overlay      = $('#drawerOverlay');
    const drawerClose  = $('#drawerClose');
    const cartList     = $('#cartList');
    const cartCount    = $('#cartCount');
    const cartSubtotal = $('#cartSubtotal');

    /* ===== mini checkout bar elements ===== */
    const miniBar        = document.getElementById('miniCheckout');
    const miniSubtotalEl = document.getElementById('miniSubtotal');
    const miniCountEl    = document.getElementById('miniCount');

    /* ===== search elements ===== */
    const grid        = document.getElementById('grid');
    const searchBox   = document.getElementById('searchBox');
    const searchClear = document.getElementById('searchClear');
    const resultCount = document.getElementById('resultCount');
    const noResults   = document.getElementById('noResults');

    const cards = grid ? Array.from(grid.children) : [];

    /* ========== Drawer toggling ========== */
    function openDrawer(){
      overlay.style.display = 'block';
      requestAnimationFrame(() => { drawer.classList.add('open'); });
    }
    function closeDrawer(){
      drawer.classList.remove('open');
      setTimeout(() => { overlay.style.display = 'none'; }, 280);
    }
    if (cartFab) cartFab.addEventListener('click', () => { openDrawer(); refreshCart(); });
    if (overlay) overlay.addEventListener('click', closeDrawer);
    if (drawerClose) drawerClose.addEventListener('click', closeDrawer);

    /* ========== Fetch helpers ========== */
    async function getJSON(url){
      try {
        const r = await fetch(url, { credentials:'same-origin' });
        if (!r.ok) return {};
        const ct = r.headers.get('content-type') || '';
        if (!ct.includes('application/json')) return {};
        return await r.json();
      } catch { return {}; }
    }

    // Try primary (/api/cart), fallback to (/cart/items)
    async function fetchCart(){
      let data = await getJSON('/api/cart');
      if (!data || (!data.items && !Array.isArray(data))) {
        data = await getJSON('/cart/items');
      }
      if (Array.isArray(data)) return { items: data };
      return data || { items: [] };
    }

    /* ========== Render cart (drawer + mini bar) ========== */
    function renderCart(items){
      if (!items || !items.length){
        cartList.innerHTML = '<p class="muted">Your cart is empty.</p>';
        cartCount.textContent = '0';
        cartSubtotal.textContent = 'R 0.00';
        if (miniBar) miniBar.hidden = true;
        return;
      }

      let subtotal = 0;
      cartList.innerHTML = items.map(it => {
        const qty   = Number(it.quantity || it.qty || 1);
        const price = Number(it.price || (it.product && it.product.price) || 0);
        const name  = it.name || (it.product && it.product.name) || 'Item';
        const id    = it.productId || (it.product && it.product._id) || it._id || '';
        const image = it.imageUrl || (it.product && it.product.imageUrl) || '';
        subtotal += (price * qty);
        return `
          <div class="drawer-item" data-id="${id}">
            <img src="${image}" alt="${name}">
            <div>
              <div style="font-weight:800">${name}</div>
              <div class="muted">R ${price.toFixed(2)} √ó ${qty}</div>
            </div>
            <span></span>
          </div>
        `;
      }).join('');

      cartSubtotal.textContent = 'R ' + subtotal.toFixed(2);
      const count = items.reduce((n, it) => n + Number(it.quantity || it.qty || 1), 0);
      cartCount.textContent = String(count);

      if (miniBar) {
        miniSubtotalEl.textContent = 'R ' + subtotal.toFixed(2);
        miniCountEl.textContent = String(count);
        miniBar.hidden = false;
      }
    }

    async function refreshCart(){
      const data = await fetchCart();
      renderCart(data.items || []);
    }

    /* ========== Add to cart (GET ?pid=) ========== */
    async function addToCart(pid, btn){
      const original = btn.textContent;
      try{
        btn.textContent = '‚è≥ Adding‚Ä¶';
        btn.setAttribute('aria-disabled', 'true');

        const r = await fetch(`/api/cart/add?pid=${encodeURIComponent(pid)}&json=1`, { credentials:'same-origin' });
        if (!r.ok) {
          let message = 'Add failed';
          try { const j = await r.json(); if (j && j.message) message = j.message; } catch {}
          throw new Error(message);
        }

        btn.textContent = '‚úÖ Added!';
        setTimeout(()=>{ btn.textContent = original; btn.removeAttribute('aria-disabled'); }, 900);
        refreshCart();
      }catch(e){
        console.error(e);
        btn.textContent = original;
        btn.removeAttribute('aria-disabled');
        alert(e.message || 'Could not add to cart. Please try again.');
      }
    }

    $$('.btn-add').forEach(btn => {
      btn.addEventListener('click', (e) => {
        e.preventDefault();
        const pid = btn.getAttribute('data-pid');
        if (!pid || btn.hasAttribute('aria-disabled')) return;
        addToCart(pid, btn);
      });
    });

    /* ========== Search + Ranking ========== */
    function normalize(s){ return String(s || '').toLowerCase().trim(); }

    function scoreMatch(name, q){
      if (!q) return 0;
      const n = normalize(name);
      const qry = normalize(q);
      if (!n || !qry) return 0;

      if (n === qry) return 100;            // exact
      if (n.startsWith(qry)) return 80;     // prefix
      if (n.includes(qry)) return 60;       // substring

      // token-based partials (e.g. "wire ls" -> "wireless")
      const qTokens = qry.split(/\s+/).filter(Boolean);
      let tokenScore = 0;
      for (const t of qTokens){
        if (n.startsWith(t)) tokenScore += 12;
        else if (n.includes(t)) tokenScore += 8;
      }
      return tokenScore; // 0.. ~
    }

    function highlight(el, query){
      const nameEl = el.querySelector('.js-name');
      const raw = nameEl?.textContent || '';
      if (!query){
        if (nameEl) nameEl.innerHTML = raw;
        return;
      }
      const q = normalize(query);
      // Simple highlight: wrap exact substring matches
      const idx = raw.toLowerCase().indexOf(q);
      if (idx === -1){ if (nameEl) nameEl.innerHTML = raw; return; }
      const before = raw.slice(0, idx);
      const hit    = raw.slice(idx, idx + q.length);
      const after  = raw.slice(idx + q.length);
      if (nameEl) nameEl.innerHTML = `${before}<mark class="hl">${hit}</mark>${after}`;
    }

    function applySearch(q){
      if (!grid || !cards.length) return;
      const trimmed = (q || '').trim();
      let visible = 0;

      // score each card
      const scored = cards.map(card => {
        const name = card.getAttribute('data-name') || '';
        const s = scoreMatch(name, trimmed);
        // show/hide
        if (trimmed && s === 0){
          card.style.display = 'none';
        } else {
          card.style.display = '';
          visible++;
        }
        highlight(card, trimmed);
        return { card, score: s };
      });

      // reorder by score (desc), stable for equal scores by original order
      if (trimmed){
        scored.sort((a,b) => b.score - a.score);
        const frag = document.createDocumentFragment();
        scored.forEach(({card, score}) => {
          if (card.style.display !== 'none') frag.appendChild(card);
        });
        grid.appendChild(frag);
      } else {
        // reset highlights if cleared
        cards.forEach(c => highlight(c, ''));
      }

      // update meta
      if (resultCount) resultCount.textContent = String(visible);
      if (noResults) noResults.hidden = visible !== 0;
    }

    // debounce
    let tId = null;
    function debouncedSearch(){
      clearTimeout(tId);
      tId = setTimeout(() => applySearch(searchBox.value), 150);
    }

    if (searchBox){
      searchBox.addEventListener('input', debouncedSearch);
    }
    if (searchClear){
      searchClear.addEventListener('click', () => {
        searchBox.value = '';
        applySearch('');
        searchBox.focus();
      });
    }

    // Prefill from ?q=
    const urlQ = new URLSearchParams(location.search).get('q');
    if (urlQ){
      searchBox.value = urlQ;
      applySearch(urlQ);
    } else {
      // initial (no query)
      if (resultCount) resultCount.textContent = String(cards.length || 0);
    }

    // Initial (cart preload)
    refreshCart();
  });
</script>












